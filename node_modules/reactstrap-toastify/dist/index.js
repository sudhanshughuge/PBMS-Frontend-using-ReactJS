'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = _interopDefault(require('react'));
var reactRedux = require('react-redux');
var reactstrap = require('reactstrap');

var NOTIFY = "RST_NOTIFY";
var CLEAR = "RST_CLEAR";
var DISMISS = "RST_DISMISS";

/**
 * Add new toast notification.
 * @param {Object} notification - Notification to be displayed.
 */
var notify = function notify(_ref) {
  var icon = _ref.icon,
      title = _ref.title,
      message = _ref.message,
      color = _ref.color,
      dismissable = _ref.dismissable,
      autoClose = _ref.autoClose;
  return function (dispatch) {
    return dispatch({
      type: NOTIFY,
      icon: icon,
      title: title,
      message: message,
      color: color,
      dismissable: dismissable,
      autoClose: autoClose
    });
  };
};

/**
 * Clear all notifications.
 */
var clear = function clear() {
  return { type: CLEAR };
};
/**
 * Dismiss specific notification.
 * @param {Array} queue
 */
var dismiss = function dismiss(notification) {
  return { type: DISMISS, notification: notification };
};

var Actions = {
  notify: notify,
  clear: clear,
  dismiss: dismiss,
  ENUM: {
    NOTIFY: NOTIFY,
    CLEAR: CLEAR,
    DISMISS: DISMISS
  }
};

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

function toast() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
    queue: []
  };
  var action = arguments[1];

  switch (action.type) {
    case Actions.ENUM.NOTIFY:
      return {
        queue: state.queue.concat([{
          icon: action.icon,
          title: action.title,
          message: action.message,
          color: action.color || "secondary",
          dismissable: action.dismissable || false,
          autoClose: action.autoClose || false,
          isOpen: true
        }])
      };
    case Actions.ENUM.CLEAR:
      return {
        queue: []
      };
    case Actions.ENUM.DISMISS:
      return {
        queue: state.queue.filter(function (q) {
          return q === action.notification || q.isOpen;
        }).map(function (q) {
          return _extends({}, q, {
            isOpen: !(action.notification === q)
          });
        })
      };
    default:
      return state;
  }
}

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css = ".styles_list__1_Bwk {\n  z-index: 1050;\n  position: fixed;\n  bottom: 0;\n  right: 0;\n  min-width: 200px;\n  min-height: 100px;\n  overflow-y: auto;\n  max-height: 100vh;\n}\n\n.styles_item__16yus {\n  transition: all .5s ease-in\n}\n";
var styles = { "list": "styles_list__1_Bwk", "item": "styles_item__16yus" };
styleInject(css);

var Toaster = function (_React$Component) {
  inherits(Toaster, _React$Component);

  function Toaster(props) {
    classCallCheck(this, Toaster);

    var _this = possibleConstructorReturn(this, (Toaster.__proto__ || Object.getPrototypeOf(Toaster)).call(this, props));

    _this.state = {
      closed: [],
      visible: []
    };
    return _this;
  }

  createClass(Toaster, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.scheduleAutoCloseAndBackground();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (prevProps.state.toast.queue.length !== this.props.state.toast.queue.length) {
        this.scheduleAutoCloseAndBackground();
      }
    }
  }, {
    key: "scheduleAutoCloseAndBackground",
    value: function scheduleAutoCloseAndBackground() {
      var _this2 = this;

      var state = this.props.state;
      var toast = state.toast;
      var queue = toast.queue;

      var itemsWithAutoClose = queue.filter(function (item) {
        return item.autoClose > 0 && item.isOpen === true;
      });

      itemsWithAutoClose.forEach(function (item) {
        setTimeout(function () {
          return _this2.handleToggle(item);
        }, item.autoClose);
      });

      setTimeout(function () {
        return _this2.setState({
          visible: queue
        });
      }, 250);
    }
  }, {
    key: "handleToggle",
    value: function handleToggle(item) {
      var _this3 = this;

      this.setState({
        visible: this.state.visible.filter(function (v) {
          return v !== item;
        })
      }, function () {
        return setTimeout(function () {
          return _this3.setState({
            closed: _this3.state.closed.concat(item)
          });
        }, 300);
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this4 = this;

      var state = this.props.state;
      var toast = state.toast;
      var queue = toast.queue;


      return React.createElement(
        "div",
        { className: styles.list + " mr-2 mb-0" },
        queue.map(function (item, idx) {
          return _this4.renderToast(item, idx);
        })
      );
    }
  }, {
    key: "renderToast",
    value: function renderToast(item, idx) {
      var title = typeof item.title === "function" ? item.title() : item.title;
      var message = typeof item.message === "function" ? item.message() : item.message;
      var isOpen = this.state.closed.indexOf(item) === -1 && item.isOpen;
      var isVisible = this.state.visible.indexOf(item) !== -1;
      var className = isVisible ? "bg-" + item.color : "";
      return React.createElement(
        "div",
        { key: idx, className: styles.item + " rounded " + className + " b-0 mb-1" },
        React.createElement(
          reactstrap.Toast,
          { isOpen: isOpen },
          React.createElement(
            reactstrap.ToastHeader,
            {
              icon: item.icon,
              toggle: item.dismissable ? this.handleToggle.bind(this, item) : undefined
            },
            title
          ),
          React.createElement(
            reactstrap.ToastBody,
            null,
            message
          )
        )
      );
    }
  }]);
  return Toaster;
}(React.Component);

var Component = reactRedux.connect(function (state) {
  return { state: state };
})(Toaster);

exports.default = Component;
exports.Actions = Actions;
exports.Reducer = toast;
//# sourceMappingURL=index.js.map
