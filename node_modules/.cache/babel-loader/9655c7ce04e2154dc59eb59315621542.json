{"ast":null,"code":"import React from 'react';\nimport { connect } from 'react-redux';\nimport { Toast, ToastHeader, ToastBody } from 'reactstrap';\nvar NOTIFY = \"RST_NOTIFY\";\nvar CLEAR = \"RST_CLEAR\";\nvar DISMISS = \"RST_DISMISS\";\n/**\n * Add new toast notification.\n * @param {Object} notification - Notification to be displayed.\n */\n\nvar notify = function notify(_ref) {\n  var icon = _ref.icon,\n      title = _ref.title,\n      message = _ref.message,\n      color = _ref.color,\n      dismissable = _ref.dismissable,\n      autoClose = _ref.autoClose;\n  return function (dispatch) {\n    return dispatch({\n      type: NOTIFY,\n      icon: icon,\n      title: title,\n      message: message,\n      color: color,\n      dismissable: dismissable,\n      autoClose: autoClose\n    });\n  };\n};\n/**\n * Clear all notifications.\n */\n\n\nvar clear = function clear() {\n  return {\n    type: CLEAR\n  };\n};\n/**\n * Dismiss specific notification.\n * @param {Array} queue\n */\n\n\nvar dismiss = function dismiss(notification) {\n  return {\n    type: DISMISS,\n    notification: notification\n  };\n};\n\nvar Actions = {\n  notify: notify,\n  clear: clear,\n  dismiss: dismiss,\n  ENUM: {\n    NOTIFY: NOTIFY,\n    CLEAR: CLEAR,\n    DISMISS: DISMISS\n  }\n};\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nfunction toast() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    queue: []\n  };\n  var action = arguments[1];\n\n  switch (action.type) {\n    case Actions.ENUM.NOTIFY:\n      return {\n        queue: state.queue.concat([{\n          icon: action.icon,\n          title: action.title,\n          message: action.message,\n          color: action.color || \"secondary\",\n          dismissable: action.dismissable || false,\n          autoClose: action.autoClose || false,\n          isOpen: true\n        }])\n      };\n\n    case Actions.ENUM.CLEAR:\n      return {\n        queue: []\n      };\n\n    case Actions.ENUM.DISMISS:\n      return {\n        queue: state.queue.filter(function (q) {\n          return q === action.notification || q.isOpen;\n        }).map(function (q) {\n          return _extends({}, q, {\n            isOpen: !(action.notification === q)\n          });\n        })\n      };\n\n    default:\n      return state;\n  }\n}\n\nfunction styleInject(css, ref) {\n  if (ref === void 0) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') {\n    return;\n  }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar css = \".styles_list__1_Bwk {\\n  z-index: 1050;\\n  position: fixed;\\n  bottom: 0;\\n  right: 0;\\n  min-width: 200px;\\n  min-height: 100px;\\n  overflow-y: auto;\\n  max-height: 100vh;\\n}\\n\\n.styles_item__16yus {\\n  transition: all .5s ease-in\\n}\\n\";\nvar styles = {\n  \"list\": \"styles_list__1_Bwk\",\n  \"item\": \"styles_item__16yus\"\n};\nstyleInject(css);\n\nvar Toaster = function (_React$Component) {\n  inherits(Toaster, _React$Component);\n\n  function Toaster(props) {\n    classCallCheck(this, Toaster);\n\n    var _this = possibleConstructorReturn(this, (Toaster.__proto__ || Object.getPrototypeOf(Toaster)).call(this, props));\n\n    _this.state = {\n      closed: [],\n      visible: []\n    };\n    return _this;\n  }\n\n  createClass(Toaster, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.scheduleAutoCloseAndBackground();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.state.toast.queue.length !== this.props.state.toast.queue.length) {\n        this.scheduleAutoCloseAndBackground();\n      }\n    }\n  }, {\n    key: \"scheduleAutoCloseAndBackground\",\n    value: function scheduleAutoCloseAndBackground() {\n      var _this2 = this;\n\n      var state = this.props.state;\n      var toast = state.toast;\n      var queue = toast.queue;\n      var itemsWithAutoClose = queue.filter(function (item) {\n        return item.autoClose > 0 && item.isOpen === true;\n      });\n      itemsWithAutoClose.forEach(function (item) {\n        setTimeout(function () {\n          return _this2.handleToggle(item);\n        }, item.autoClose);\n      });\n      setTimeout(function () {\n        return _this2.setState({\n          visible: queue\n        });\n      }, 250);\n    }\n  }, {\n    key: \"handleToggle\",\n    value: function handleToggle(item) {\n      var _this3 = this;\n\n      this.setState({\n        visible: this.state.visible.filter(function (v) {\n          return v !== item;\n        })\n      }, function () {\n        return setTimeout(function () {\n          return _this3.setState({\n            closed: _this3.state.closed.concat(item)\n          });\n        }, 300);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var state = this.props.state;\n      var toast = state.toast;\n      var queue = toast.queue;\n      return React.createElement(\"div\", {\n        className: styles.list + \" mr-2 mb-0\"\n      }, queue.map(function (item, idx) {\n        return _this4.renderToast(item, idx);\n      }));\n    }\n  }, {\n    key: \"renderToast\",\n    value: function renderToast(item, idx) {\n      var title = typeof item.title === \"function\" ? item.title() : item.title;\n      var message = typeof item.message === \"function\" ? item.message() : item.message;\n      var isOpen = this.state.closed.indexOf(item) === -1 && item.isOpen;\n      var isVisible = this.state.visible.indexOf(item) !== -1;\n      var className = isVisible ? \"bg-\" + item.color : \"\";\n      return React.createElement(\"div\", {\n        key: idx,\n        className: styles.item + \" rounded \" + className + \" b-0 mb-1\"\n      }, React.createElement(Toast, {\n        isOpen: isOpen\n      }, React.createElement(ToastHeader, {\n        icon: item.icon,\n        toggle: item.dismissable ? this.handleToggle.bind(this, item) : undefined\n      }, title), React.createElement(ToastBody, null, message)));\n    }\n  }]);\n  return Toaster;\n}(React.Component);\n\nvar Component = connect(function (state) {\n  return {\n    state: state\n  };\n})(Toaster);\nexport default Component;\nexport { Actions, toast as Reducer };","map":{"version":3,"mappings":"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","names":["NOTIFY","CLEAR","DISMISS","notify","icon","title","message","color","dismissable","autoClose","dispatch","clear","type","dismiss","notification","toast","state","action","Actions","ENUM","queue","concat","filter","q","isOpen","map","styleInject","css","ref","insertAt","document","head","getElementsByTagName","style","createElement","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","Toaster","props","scheduleAutoCloseAndBackground","prevProps","length","itemsWithAutoClose","item","forEach","_this2","handleToggle","setState","visible","v","setTimeout","_this3","closed","React","className","styles","list","idx","_this4","renderToast","indexOf","isVisible","key","bind","undefined","Component","connect"],"sources":["C:\\Major Project\\ProjectFrontend\\pbms\\node_modules\\reactstrap-toastify\\src\\Actions.js","C:\\Major Project\\ProjectFrontend\\pbms\\node_modules\\reactstrap-toastify\\src\\Reducer.js","C:\\Major Project\\ProjectFrontend\\pbms\\node_modules\\reactstrap-toastify\\node_modules\\style-inject\\dist\\style-inject.es.js","C:\\Major Project\\ProjectFrontend\\pbms\\node_modules\\reactstrap-toastify\\src\\Component.js"],"sourcesContent":["const NOTIFY = \"RST_NOTIFY\";\nconst CLEAR = \"RST_CLEAR\";\nconst DISMISS = \"RST_DISMISS\";\n\n/**\n * Add new toast notification.\n * @param {Object} notification - Notification to be displayed.\n */\nconst notify = ({\n  /** Icon to display on the left side of the title. */\n  icon,\n  /** Title to display. */\n  title,\n  /** Message to display. */\n  message,\n  /** Color theme to apply. */\n  color,\n  /** Indicates if the notification can be dismissed by the user. */\n  dismissable,\n  /** Indicates after how many milliseconds the toast notification must be closed automatically. */\n  autoClose\n}) => dispatch =>\n  dispatch({\n    type: NOTIFY,\n    icon,\n    title,\n    message,\n    color,\n    dismissable,\n    autoClose\n  });\n\n/**\n * Clear all notifications.\n */\nconst clear = () => ({ type: CLEAR });\n/**\n * Dismiss specific notification.\n * @param {Array} queue\n */\nconst dismiss = notification => ({ type: DISMISS, notification });\n\nexport default {\n  notify,\n  clear,\n  dismiss,\n  ENUM: {\n    NOTIFY,\n    CLEAR,\n    DISMISS\n  }\n};\n","import Actions from \"./Actions\";\n\nexport default function toast(\n  state = {\n    queue: []\n  },\n  action\n) {\n  switch (action.type) {\n    case Actions.ENUM.NOTIFY:\n      return {\n        queue: state.queue.concat([\n          {\n            icon: action.icon,\n            title: action.title,\n            message: action.message,\n            color: action.color || \"secondary\",\n            dismissable: action.dismissable || false,\n            autoClose: action.autoClose || false,\n            isOpen: true\n          }\n        ])\n      };\n    case Actions.ENUM.CLEAR:\n      return {\n        queue: []\n      };\n    case Actions.ENUM.DISMISS:\n      return {\n        queue: state.queue\n          .filter(q => q === action.notification || q.isOpen)\n          .map(q => ({\n            ...q,\n            isOpen: !(action.notification === q)\n          }))\n      };\n    default:\n      return state;\n  }\n}\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Toast, ToastHeader, ToastBody } from \"reactstrap\";\nimport styles from \"./styles.css\";\n\nclass Toaster extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      closed: [],\n      visible: []\n    };\n  }\n  componentDidMount() {\n    this.scheduleAutoCloseAndBackground();\n  }\n  componentDidUpdate(prevProps) {\n    if (\n      prevProps.state.toast.queue.length !== this.props.state.toast.queue.length\n    ) {\n      this.scheduleAutoCloseAndBackground();\n    }\n  }\n  scheduleAutoCloseAndBackground() {\n    const { state } = this.props;\n    const { toast } = state;\n    const { queue } = toast;\n    const itemsWithAutoClose = queue.filter(\n      item => item.autoClose > 0 && item.isOpen === true\n    );\n\n    itemsWithAutoClose.forEach(item => {\n      setTimeout(() => this.handleToggle(item), item.autoClose);\n    });\n\n    setTimeout(\n      () =>\n        this.setState({\n          visible: queue\n        }),\n      250\n    );\n  }\n\n  handleToggle(item) {\n    this.setState(\n      {\n        visible: this.state.visible.filter(v => v !== item)\n      },\n      () =>\n        setTimeout(\n          () =>\n            this.setState({\n              closed: this.state.closed.concat(item)\n            }),\n          300\n        )\n    );\n  }\n\n  render() {\n    const { state } = this.props;\n    const { toast } = state;\n    const { queue } = toast;\n\n    return (\n      <div className={`${styles.list} mr-2 mb-0`}>\n        {queue.map((item, idx) => this.renderToast(item, idx))}\n      </div>\n    );\n  }\n  renderToast(item, idx) {\n    const title = typeof item.title === \"function\" ? item.title() : item.title;\n    const message =\n      typeof item.message === \"function\" ? item.message() : item.message;\n    const isOpen = this.state.closed.indexOf(item) === -1 && item.isOpen;\n    const isVisible = this.state.visible.indexOf(item) !== -1;\n    const className = isVisible ? `bg-${item.color}` : \"\";\n    return (\n      <div key={idx} className={`${styles.item} rounded ${className} b-0 mb-1`}>\n        <Toast isOpen={isOpen}>\n          <ToastHeader\n            icon={item.icon}\n            toggle={\n              item.dismissable ? this.handleToggle.bind(this, item) : undefined\n            }\n          >\n            {title}\n          </ToastHeader>\n\n          <ToastBody>{message}</ToastBody>\n        </Toast>\n      </div>\n    );\n  }\n}\n\nexport default connect(state => ({ state }))(Toaster);\n"]},"metadata":{},"sourceType":"module"}